package de.fh.albsig.digitalfactory.client;

import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoDestinationManager;
import com.sap.conn.jco.JCoException;
import com.sap.conn.jco.JCoField;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoRepository;
import com.sap.conn.jco.JCoTable;

import de.fh.albsig.digitalfactory.connector.JCoConstants;
import de.fh.albsig.digitalfactory.connector.model.Task;

public class OrderListScheduler {
	
	
	
	private JCoDestination destination;
	private JCoFunction function;

	public OrderListScheduler() throws JCoException
	{
		this.destination = JCoDestinationManager.getDestination(JCoConstants.JCO_DESTINATION_PATH);
		this.destination.ping();

		final JCoRepository repository = this.destination.getRepository();

		this.function = repository.getFunction(JCoConstants.GETORDERLIST);
	}
	
	public List<String> nextTask()
			throws JCoException, FileNotFoundException, UnsupportedEncodingException
		{
			final JCoParameterList input = this.function.getImportParameterList();
			input.setValue(JCoConstants.I_ORDERNUMBER, orderNumber);
			input.setValue(JCoConstants.I_TRANSACTIONKEY, transactionKey);

			this.function.execute(this.destination);
		
			final JCoTable table = this.function.getTableParameterList().getTable("T_OPERATION");
			List<Task> tasks = new ArrayList<Task>();
			
			for (int i = 0; i < table.getNumRows(); i++)

			{
				table.setRow(i);
				
				// the for-each loop works here, however better performance is provided
				// by accessing fields directly from the table e.g. with getString(i)
				int j = 0;
				String[] StringField = new String[table.getNumColumns()];
				for (JCoField field : table) {
					StringField[j] = field.getString();
					j++;
				};
				long l = (long)Double.parseDouble(StringField[3]);
				
				Task task = new Task(StringField[1], StringField[6], Double.parseDouble(StringField[2]),  l, Boolean.valueOf(StringField[4]), Boolean.valueOf(StringField[5]), StringField[7]);
		
				tasks.add(task);
			};
			return tasks;
		}

	
	

}
